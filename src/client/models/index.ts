/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DataResult}
 */
// @ts-ignore
export function createDataResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDataResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Expense}
 */
// @ts-ignore
export function createExpenseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExpense;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExpenseList}
 */
// @ts-ignore
export function createExpenseListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExpenseList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails_errors}
 */
// @ts-ignore
export function createHttpValidationProblemDetails_errorsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails_errors;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails}
 */
// @ts-ignore
export function createHttpValidationProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Invoice}
 */
// @ts-ignore
export function createInvoiceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInvoice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InvoiceList}
 */
// @ts-ignore
export function createInvoiceListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInvoiceList;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Job}
 */
// @ts-ignore
export function createJobFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJob;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JobRequest}
 */
// @ts-ignore
export function createJobRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJobRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JobRequestResult}
 */
// @ts-ignore
export function createJobRequestResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJobRequestResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Property}
 */
// @ts-ignore
export function createPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProperty;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PropertyList}
 */
// @ts-ignore
export function createPropertyListFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPropertyList;
}
export type DataFlavor = (typeof DataFlavorObject)[keyof typeof DataFlavorObject];
export interface DataResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expenses property
     */
    expenses?: ExpenseList | null;
    /**
     * The invoices property
     */
    invoices?: InvoiceList | null;
    /**
     * The properties property
     */
    properties?: PropertyList | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDataResult(dataResult: Partial<DataResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expenses": n => { dataResult.expenses = n.getObjectValue<ExpenseList>(createExpenseListFromDiscriminatorValue); },
        "invoices": n => { dataResult.invoices = n.getObjectValue<InvoiceList>(createInvoiceListFromDiscriminatorValue); },
        "properties": n => { dataResult.properties = n.getObjectValue<PropertyList>(createPropertyListFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExpense(expense: Partial<Expense> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { expense.amount = n.getNumberValue(); },
        "category": n => { expense.category = n.getStringValue(); },
        "description": n => { expense.description = n.getStringValue(); },
        "expenseDate": n => { expense.expenseDate = n.getDateValue(); },
        "id": n => { expense.id = n.getStringValue(); },
        "payeeName": n => { expense.payeeName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExpenseList(expenseList: Partial<ExpenseList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expenses": n => { expenseList.expenses = n.getCollectionOfObjectValues<Expense>(createExpenseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails(httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { httpValidationProblemDetails.detail = n.getStringValue(); },
        "errors": n => { httpValidationProblemDetails.errors = n.getObjectValue<HttpValidationProblemDetails_errors>(createHttpValidationProblemDetails_errorsFromDiscriminatorValue); },
        "instance": n => { httpValidationProblemDetails.instance = n.getStringValue(); },
        "status": n => { httpValidationProblemDetails.status = n.getNumberValue(); },
        "title": n => { httpValidationProblemDetails.title = n.getStringValue(); },
        "type": n => { httpValidationProblemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails_errors(httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvoice(invoice: Partial<Invoice> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { invoice.amount = n.getNumberValue(); },
        "datePaid": n => { invoice.datePaid = n.getDateValue(); },
        "dueDate": n => { invoice.dueDate = n.getDateValue(); },
        "id": n => { invoice.id = n.getStringValue(); },
        "invoiceType": n => { invoice.invoiceType = n.getStringValue(); },
        "paymentCategory": n => { invoice.paymentCategory = n.getStringValue(); },
        "paymentStatus": n => { invoice.paymentStatus = n.getEnumValue<PaymentStatus>(PaymentStatusObject); },
        "tenantName": n => { invoice.tenantName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvoiceList(invoiceList: Partial<InvoiceList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "invoices": n => { invoiceList.invoices = n.getCollectionOfObjectValues<Invoice>(createInvoiceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJob(job: Partial<Job> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endDate": n => { job.endDate = n.getDateOnlyValue(); },
        "flavor": n => { job.flavor = n.getEnumValue<DataFlavor>(DataFlavorObject); },
        "id": n => { job.id = n.getStringValue(); },
        "jobStatus": n => { job.jobStatus = n.getEnumValue<JobStatus>(JobStatusObject); },
        "propertyOwnerId": n => { job.propertyOwnerId = n.getStringValue(); },
        "retrievalUrl": n => { job.retrievalUrl = n.getStringValue(); },
        "startDate": n => { job.startDate = n.getDateOnlyValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJobRequest(jobRequest: Partial<JobRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endDate": n => { jobRequest.endDate = n.getDateOnlyValue(); },
        "flavor": n => { jobRequest.flavor = n.getEnumValue<DataFlavor>(DataFlavorObject); },
        "propertyOwnerId": n => { jobRequest.propertyOwnerId = n.getStringValue(); },
        "startDate": n => { jobRequest.startDate = n.getDateOnlyValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJobRequestResult(jobRequestResult: Partial<JobRequestResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "jobId": n => { jobRequestResult.jobId = n.getStringValue(); },
        "message": n => { jobRequestResult.message = n.getStringValue(); },
        "monitorUrl": n => { jobRequestResult.monitorUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProperty(property: Partial<Property> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { property.address = n.getStringValue(); },
        "id": n => { property.id = n.getStringValue(); },
        "name": n => { property.name = n.getStringValue(); },
        "units": n => { property.units = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPropertyList(propertyList: Partial<PropertyList> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "properties": n => { propertyList.properties = n.getCollectionOfObjectValues<Property>(createPropertyFromDiscriminatorValue); },
    }
}
export interface Expense extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The category property
     */
    category?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The expenseDate property
     */
    expenseDate?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The payeeName property
     */
    payeeName?: string | null;
}
export interface ExpenseList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expenses property
     */
    expenses?: Expense[] | null;
}
export interface HttpValidationProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The errors property
     */
    errors?: HttpValidationProblemDetails_errors | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface HttpValidationProblemDetails_errors extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface Invoice extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The datePaid property
     */
    datePaid?: Date | null;
    /**
     * The dueDate property
     */
    dueDate?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The invoiceType property
     */
    invoiceType?: string | null;
    /**
     * The paymentCategory property
     */
    paymentCategory?: string | null;
    /**
     * The paymentStatus property
     */
    paymentStatus?: PaymentStatus | null;
    /**
     * The tenantName property
     */
    tenantName?: string | null;
}
export interface InvoiceList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The invoices property
     */
    invoices?: Invoice[] | null;
}
export interface Job extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endDate property
     */
    endDate?: DateOnly | null;
    /**
     * The flavor property
     */
    flavor?: DataFlavor | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The jobStatus property
     */
    jobStatus?: JobStatus | null;
    /**
     * The propertyOwnerId property
     */
    propertyOwnerId?: string | null;
    /**
     * The retrievalUrl property
     */
    retrievalUrl?: string | null;
    /**
     * The startDate property
     */
    startDate?: DateOnly | null;
}
export interface JobRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endDate property
     */
    endDate?: DateOnly | null;
    /**
     * The flavor property
     */
    flavor?: DataFlavor | null;
    /**
     * The propertyOwnerId property
     */
    propertyOwnerId?: string | null;
    /**
     * The startDate property
     */
    startDate?: DateOnly | null;
}
export interface JobRequestResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The jobId property
     */
    jobId?: string | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The monitorUrl property
     */
    monitorUrl?: string | null;
}
export type JobStatus = (typeof JobStatusObject)[keyof typeof JobStatusObject];
export type PaymentStatus = (typeof PaymentStatusObject)[keyof typeof PaymentStatusObject];
export interface Property extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The address property
     */
    address?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The units property
     */
    units?: number | null;
}
export interface PropertyList extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The properties property
     */
    properties?: Property[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDataResult(writer: SerializationWriter, dataResult: Partial<DataResult> | undefined | null = {}) : void {
    if (dataResult) {
        writer.writeObjectValue<ExpenseList>("expenses", dataResult.expenses, serializeExpenseList);
        writer.writeObjectValue<InvoiceList>("invoices", dataResult.invoices, serializeInvoiceList);
        writer.writeObjectValue<PropertyList>("properties", dataResult.properties, serializePropertyList);
        writer.writeAdditionalData(dataResult.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExpense(writer: SerializationWriter, expense: Partial<Expense> | undefined | null = {}) : void {
    if (expense) {
        writer.writeNumberValue("amount", expense.amount);
        writer.writeStringValue("category", expense.category);
        writer.writeStringValue("description", expense.description);
        writer.writeDateValue("expenseDate", expense.expenseDate);
        writer.writeStringValue("id", expense.id);
        writer.writeStringValue("payeeName", expense.payeeName);
        writer.writeAdditionalData(expense.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExpenseList(writer: SerializationWriter, expenseList: Partial<ExpenseList> | undefined | null = {}) : void {
    if (expenseList) {
        writer.writeCollectionOfObjectValues<Expense>("expenses", expenseList.expenses, serializeExpense);
        writer.writeAdditionalData(expenseList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails(writer: SerializationWriter, httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined | null = {}) : void {
    if (httpValidationProblemDetails) {
        writer.writeStringValue("detail", httpValidationProblemDetails.detail);
        writer.writeObjectValue<HttpValidationProblemDetails_errors>("errors", httpValidationProblemDetails.errors, serializeHttpValidationProblemDetails_errors);
        writer.writeStringValue("instance", httpValidationProblemDetails.instance);
        writer.writeNumberValue("status", httpValidationProblemDetails.status);
        writer.writeStringValue("title", httpValidationProblemDetails.title);
        writer.writeStringValue("type", httpValidationProblemDetails.type);
        writer.writeAdditionalData(httpValidationProblemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails_errors(writer: SerializationWriter, httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined | null = {}) : void {
    if (httpValidationProblemDetails_errors) {
        writer.writeAdditionalData(httpValidationProblemDetails_errors.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvoice(writer: SerializationWriter, invoice: Partial<Invoice> | undefined | null = {}) : void {
    if (invoice) {
        writer.writeNumberValue("amount", invoice.amount);
        writer.writeDateValue("datePaid", invoice.datePaid);
        writer.writeDateValue("dueDate", invoice.dueDate);
        writer.writeStringValue("id", invoice.id);
        writer.writeStringValue("invoiceType", invoice.invoiceType);
        writer.writeStringValue("paymentCategory", invoice.paymentCategory);
        writer.writeEnumValue<PaymentStatus>("paymentStatus", invoice.paymentStatus);
        writer.writeStringValue("tenantName", invoice.tenantName);
        writer.writeAdditionalData(invoice.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvoiceList(writer: SerializationWriter, invoiceList: Partial<InvoiceList> | undefined | null = {}) : void {
    if (invoiceList) {
        writer.writeCollectionOfObjectValues<Invoice>("invoices", invoiceList.invoices, serializeInvoice);
        writer.writeAdditionalData(invoiceList.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJob(writer: SerializationWriter, job: Partial<Job> | undefined | null = {}) : void {
    if (job) {
        writer.writeDateOnlyValue("endDate", job.endDate);
        writer.writeEnumValue<DataFlavor>("flavor", job.flavor);
        writer.writeStringValue("id", job.id);
        writer.writeEnumValue<JobStatus>("jobStatus", job.jobStatus);
        writer.writeStringValue("propertyOwnerId", job.propertyOwnerId);
        writer.writeStringValue("retrievalUrl", job.retrievalUrl);
        writer.writeDateOnlyValue("startDate", job.startDate);
        writer.writeAdditionalData(job.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJobRequest(writer: SerializationWriter, jobRequest: Partial<JobRequest> | undefined | null = {}) : void {
    if (jobRequest) {
        writer.writeDateOnlyValue("endDate", jobRequest.endDate);
        writer.writeEnumValue<DataFlavor>("flavor", jobRequest.flavor);
        writer.writeStringValue("propertyOwnerId", jobRequest.propertyOwnerId);
        writer.writeDateOnlyValue("startDate", jobRequest.startDate);
        writer.writeAdditionalData(jobRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJobRequestResult(writer: SerializationWriter, jobRequestResult: Partial<JobRequestResult> | undefined | null = {}) : void {
    if (jobRequestResult) {
        writer.writeStringValue("jobId", jobRequestResult.jobId);
        writer.writeStringValue("message", jobRequestResult.message);
        writer.writeStringValue("monitorUrl", jobRequestResult.monitorUrl);
        writer.writeAdditionalData(jobRequestResult.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProperty(writer: SerializationWriter, property: Partial<Property> | undefined | null = {}) : void {
    if (property) {
        writer.writeStringValue("address", property.address);
        writer.writeStringValue("id", property.id);
        writer.writeStringValue("name", property.name);
        writer.writeNumberValue("units", property.units);
        writer.writeAdditionalData(property.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePropertyList(writer: SerializationWriter, propertyList: Partial<PropertyList> | undefined | null = {}) : void {
    if (propertyList) {
        writer.writeCollectionOfObjectValues<Property>("properties", propertyList.properties, serializeProperty);
        writer.writeAdditionalData(propertyList.additionalData);
    }
}
export const DataFlavorObject = {
    Expense: "Expense",
    Invoice: "Invoice",
    Property: "Property",
} as const;
export const JobStatusObject = {
    NotStarted: "NotStarted",
    Running: "Running",
    Succeeded: "Succeeded",
    Failed: "Failed",
} as const;
export const PaymentStatusObject = {
    Processing: "Processing",
    Rejected: "Rejected",
    Submitted: "Submitted",
    Approved: "Approved",
} as const;
/* tslint:enable */
/* eslint-enable */
